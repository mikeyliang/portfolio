generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Project {
  type           String[]
  name           String           @unique
  description    String?
  img            String?
  //projectTime    String?
  //inProgress     Boolean          @default(true)
  createdAt      DateTime         @default(now())
  modifiedAt     DateTime         @updatedAt
  id             Int              @id @default(autoincrement())
  github         String?
  projectContent ProjectContent[]

  projectStartYear  Int? //if null, project is in progress
  projectStartMonth Int?
  projectEndYear    Int?
  projectEndMonth   Int?
}

model ProjectContent {
  id          Int         @id @default(autoincrement())
  order       Int
  contentType ContentType
  content     String
  projectId   Int
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, order])
}

model TubeLevel {
  level             Int                 @id @unique
  type              LevelType           @default(REGULAR)
  createdAt         DateTime            @default(now())
  modifiedAt        DateTime            @updatedAt
  tubes             Tube[]
  tubeColors        TubeColor[]
  tubeMoves         TubeMoves[]
  tubeColorRelation TubeColorRelation[]
}

model TubeMoves {
  id        Int       @id @default(autoincrement())
  step      Int
  from      Int
  fromTube  Tube      @relation(name: "from", fields: [from], references: [id], onDelete: Cascade)
  to        Int
  toTube    Tube      @relation(name: "to", fields: [to], references: [id], onDelete: Cascade)
  level     Int
  tubeLevel TubeLevel @relation(fields: [level], references: [level], onDelete: Cascade)

  @@unique([level, step])
}

model Tube {
  id                Int                 @id @default(autoincrement())
  tubeIndex         Int
  tubeMovesFrom     TubeMoves[]         @relation("from")
  tubeMovesTo       TubeMoves[]         @relation("to")
  tubeLevel         TubeLevel           @relation(fields: [level], references: [level], onDelete: Cascade)
  level             Int
  TubeColorRelation TubeColorRelation[]

  @@unique([level, tubeIndex])
}

model TubeColorRelation {
  id          Int       @id @unique @default(autoincrement())
  position    Int
  tubeId      Int
  tube        Tube      @relation(fields: [tubeId], references: [id], onDelete: Cascade)
  tubeColorId Int
  tubeColor   TubeColor @relation(fields: [tubeColorId], references: [id], onDelete: Cascade)
  level       Int
  tubeLevel   TubeLevel @relation(fields: [level], references: [level], onDelete: Cascade)

  @@unique([tubeId, tubeColorId, level, position])
}

model TubeColor {
  id                Int                 @id @unique @default(autoincrement())
  colorIndex        Int
  red               Int
  green             Int
  blue              Int
  tubeColorRelation TubeColorRelation[]
  tubeLevel         TubeLevel           @relation(fields: [level], references: [level], onDelete: Cascade)
  level             Int

  @@unique([level, colorIndex])
}

model User {
  id                    String     @id @default(uuid())
  name                  String
  email                 String?    @unique
  emailVerified         DateTime?   @map("email_verified")
  image                 String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  accounts              Account[]
  sessions              Session[]
  role                  UserRole @default(USER)
  @@map("users")
}
model Account {
  id                 String    @id @default(cuid())
  userId              String    @map("user_id")
  type                 String?
  provider           String
  providerAccountId  String    @map("provider_account_id")
  token_type         String?
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  scope              String?
  id_token           String? @db.Text
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @db.Text @map("session_token") @unique
  accessToken  String?  @db.Text @map("access_token")
  expires      DateTime
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  USER
}

enum LevelType {
  REGULAR
  UNKNOWN
}

enum ContentType {
  TEXT
  IMAGE
  VIDEO
  HEADING
  FILE
  LINK
}
