generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Project {
  type           String[]
  name           String           @unique
  description    String?
  img            String?
  projectTime    String?
  inProgress     Boolean          @default(true)
  createdAt      DateTime         @default(now())
  modifiedAt     DateTime         @updatedAt
  id             Int              @id @default(autoincrement())
  github         String?
  projectContent ProjectContent[]
}

model ProjectContent {
  id          Int         @id @default(autoincrement())
  order       Int
  contentType ContentType
  content     String
  projectId   Int
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, order])
}

model TubeLevel {
  level             Int                 @id @unique
  type              LevelType           @default(REGULAR)
  createdAt         DateTime            @default(now())
  modifiedAt        DateTime            @updatedAt
  tubes             Tube[]
  tubeColors        TubeColor[]
  tubeMoves         TubeMoves[]
  tubeColorRelation TubeColorRelation[]
}

model TubeMoves {
  id        Int       @id @default(autoincrement())
  step      Int
  from      Int
  fromTube  Tube      @relation(name: "from", fields: [from], references: [id], onDelete: Cascade)
  to        Int
  toTube    Tube      @relation(name: "to", fields: [to], references: [id], onDelete: Cascade)
  level     Int
  tubeLevel TubeLevel @relation(fields: [level], references: [level], onDelete: Cascade)

  @@unique([level, step])
}

model Tube {
  id                Int                 @id @default(autoincrement())
  tubeIndex         Int
  tubeMovesFrom     TubeMoves[]         @relation("from")
  tubeMovesTo       TubeMoves[]         @relation("to")
  tubeLevel         TubeLevel           @relation(fields: [level], references: [level], onDelete: Cascade)
  level             Int
  TubeColorRelation TubeColorRelation[]

  @@unique([level, tubeIndex])
}

model TubeColorRelation {
  id          Int       @id @unique @default(autoincrement())
  position    Int
  tubeId      Int
  tube        Tube      @relation(fields: [tubeId], references: [id], onDelete: Cascade)
  tubeColorId Int
  tubeColor   TubeColor @relation(fields: [tubeColorId], references: [id], onDelete: Cascade)
  level       Int
  tubeLevel   TubeLevel @relation(fields: [level], references: [level], onDelete: Cascade)

  @@unique([tubeId, tubeColorId, level, position])
}

model TubeColor {
  id                Int                 @id @unique @default(autoincrement())
  colorIndex        Int
  red               Int
  green             Int
  blue              Int
  tubeColorRelation TubeColorRelation[]
  tubeLevel         TubeLevel           @relation(fields: [level], references: [level], onDelete: Cascade)
  level             Int

  @@unique([level, colorIndex])
}

enum LevelType {
  REGULAR
  UNKNOWN
}

enum ContentType {
  TEXT
  IMAGE
  VIDEO
  HEADING
  FILE
  LINK
}
